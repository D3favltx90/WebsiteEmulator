name: Website Health Check

on:
  push:
    branches:
      - main # primary brach
  pull_request:
    branches:
      - main # any pull request to main

jobs:
  health-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build the Docker image
        run: |
          docker build -t website_emulator .
        
      - name: Verify image exists
        run: |
          docker image ls
          
      - name: Start the Web App with Docker Compose
        run: |
          docker run -d -p 80:80 website_emulator:latest
   
      - name: Wait for the Application to Start
        run: sleep 10  # Adjust this time as needed

      - name: Run Website Health Check
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
          if [[ "$STATUS_CODE" -ne "200" ]]; then
            echo "Website Health Check Failed! Status Code: $STATUS_CODE"
            exit 1
          else
            echo "Website Health Check Passed! Status Code: $STATUS_CODE"
          fi

      # Need to add checks per site checking for expected content
      - name: Run server_name 'localhost' Health Check
        run: |
          # Verify localhost Host Header does not redirect to any site
          EXIT_CODE=$(curl -s -H 'Host: localhost' http://localhost | egrep -io '<title>.*nginx' 1>/dev/null 2>/dev/null; echo $?)
          if [[ "$EXIT_CODE" -ne "0" ]]; then
            echo "'localhost' Health Check Failed! Curl Content: $(curl -s -H 'Host: localhost' http://localhost)"
            exit 1
          else
            echo "'localhost' Health Check Passed! Status Code: $EXIT_CODE"
          fi

      - name: Run server_name 'dripmart.org' Health Check
        run: |
          # Verify localhost Host Header does not redirect to any site
          EXIT_CODE=$(curl -s -H 'Host: dripmart.org' http://localhost | egrep -io '<title>.*dripmart' 1>/dev/null 2>/dev/null; echo $?)
          if [[ "$EXIT_CODE" -ne "0" ]]; then
            echo "'dripmart.org' Health Check Failed! Curl Content: $(curl -s -H 'Host: dripmart.org' http://localhost)"
            exit 1
          else
            echo "'dripmart.org' Health Check Passed! Status Code: $EXIT_CODE"
          fi

      - name: Run server_name 'echoteck.net' Health Check
        run: |
          # Verify localhost Host Header does not redirect to any site
          EXIT_CODE=$(curl -s -H 'Host: echoteck.net' http://localhost | egrep -io '<title>.*echoteck' 1>/dev/null 2>/dev/null; echo $?)
          if [[ "$EXIT_CODE" -ne "0" ]]; then
            echo "'echoteck.net' Health Check Failed! Curl Content: $(curl -s -H 'Host: echoteck.net' http://localhost)"
            exit 1
          else
            echo "'echoteck.net' Health Check Passed! Status Code: $EXIT_CODE"
          fi

      - name: Run server_name 'vidstreamerz.com' Health Check
        run: |
          # Verify localhost Host Header does not redirect to any site
          EXIT_CODE=$(curl -s -H 'Host: vidstreamerz.com' http://localhost | egrep -io '<title>.*vidstreamerz' 1>/dev/null 2>/dev/null; echo $?)
          if [[ "$EXIT_CODE" -ne "0" ]]; then
            echo "'vidstreamerz.com' Health Check Failed! Curl Content: $(curl -s -H 'Host: vidstreamerz.com' http://localhost)"
            exit 1
          else
            echo "'vidstreamerz.com' Health Check Passed! Status Code: $EXIT_CODE"
          fi

      - name: Run server_name 'sportsballnews.org' Health Check
        run: |
          # Verify localhost Host Header does not redirect to any site
          EXIT_CODE=$(curl -s -H 'Host: sportsballnews.org' http://localhost | egrep -io '<title>.*sportsballnews' 1>/dev/null 2>/dev/null; echo $?)
          if [[ "$EXIT_CODE" -ne "0" ]]; then
            echo "'sportsballnews.org' Health Check Failed! Curl Content: $(curl -s -H 'Host: sportsballnews.org' http://localhost)"
            exit 1
          else
            echo "'sportsballnews.org' Health Check Passed! Status Code: $EXIT_CODE"
          fi

      # Need to add checks per site checking for expected 404 page

      - name: Stop the Web App with Docker Compose
        if: always() # Ensure this runs even if previous steps failed
        run: |
          if [[ $(docker ps -a -q | wc -l) > 0 ]]; then docker stop $(docker ps -a -q); fi
